#include "pic24_all.h"

#include "i2c.h"
#include "timers.h"
#include "sensor.h"
#include "audio.h"
#include "filters.h"
#include "vario.h"
#include "button.h"
#include "DEE Emulation 16-bit.h"

//#define DEBUG

#ifdef DEBUG
    #include <stdio.h>
    #include "uart.h"
    char dbgBuf[50];
#endif

//#define NBVALUES 10
//s32 values[NBVALUES];
//u8 values_i = 0;

//s32 valuesf[NBVALUES];
//u8 valuesf_i = 0;

_FBS( BSS_OFF & BWRP_OFF )
_FGS( GSS0_OFF & GWRP_OFF )
_FOSCSEL( FNOSC_LPFRCDIV & IESO_OFF )
_FOSC( FCKSM_CSECMD & POSCFREQ_100KHZ & OSCIOFNC_ON & POSCMOD_NONE)
_FWDT( FWDTEN_ON & WINDIS_OFF & FWPSA_PR128 & WDTPS_PS32768 )
_FPOR( MCLRE_ON & BORV_1_8V & AI2C1SEL_PRI & PWRTEN_OFF & BOREN_BOR3)
_FICD( BKBUG_OFF & COE_OFF & ICS_PGx3 )
_FDS( DSWDTEN_OFF & DSBOR_OFF & RTCCREF_OFF & DSWDTLPRC_OFF & DSWDTPS_DSWDTPS_0 )


volatile u8 tmr1_waiting = 0;
s32 pressureSample = 0;
s32 filteredPressure = 0;
s32 samples[MEASURE_INTEGRATE_TIME_IN_SAMPLES];
u8 sns_status = 0;

u32 Praw = 0;

//s32 pressure_last = 0;
u16 pressure_count = 0;

#define INTRO_LENGTH 7
u32 intro_freqs[INTRO_LENGTH] = {440, 0,  698, 0,  659, 0,  587};
u32 intro_times[INTRO_LENGTH] = {600, 40, 600, 40, 600, 40, 1200};

void nextSpeed(s32 *speed) {
    u16 i = pressure_count + 1;
    if (i >= MEASURE_INTEGRATE_TIME_IN_SAMPLES) {i = 0;}
    *speed = (samples[i] - samples[pressure_count]) * 4;
}

// Linear Regression
void nextFitSpeed(s64 *speed) {
    u16 i  = 0; // t index
    u16 i_ = 0; // corresponding index in sample in array
    u32 X_SUM = 465L;
    u32 DENOM = 337L;
    u64 XY_SUM = 0LL;
    u64 Y_SUM = 0LL;
    for(i=0;i<MEASURE_INTEGRATE_TIME_IN_SAMPLES;i++) {
        i_ = i+pressure_count;
        if (i_ >= MEASURE_INTEGRATE_TIME_IN_SAMPLES) {i_ = i+pressure_count - MEASURE_INTEGRATE_TIME_IN_SAMPLES;}
        Y_SUM = Y_SUM + samples[i_];
        XY_SUM = XY_SUM + ((i+1) * samples[i_]);
    }
    *speed = 10 + (((s64)X_SUM * (s64)Y_SUM) - (MEASURE_INTEGRATE_TIME_IN_SAMPLES * (s64)XY_SUM) ) / ((s64)DENOM);
}

void startElapsedTime(void) {
    tmr1_Start(100000);
    _T1IE = 0;
}

#ifdef DEBUG
void printElapsedTime(void) {
    sprintf(dbgBuf, "Elapsed Time = %u ms\r\n", TMR1);
    tmr1_Stop();
    uart_Print(dbgBuf);
    sns_status = 0;
    sns_TriggerTemperatureSample();
    tmr1_Start(MEASURE_PERIOD_T);
}
#endif

void mcu_Init(void) {
    AD1PCFG = 0xFFFF;            // set all analog-input enabled pins (ANx) to digital mode
    CLKDIVbits.RCDIV = 0;  	 // LPFRC oscillator 500kHz divided by 1
    CONFIG_RB2_AS_DIG_OUTPUT();  // 6 : gpioDbg
    CONFIG_RA4_AS_DIG_OUTPUT();   // DEBUG
    CONFIG_RA6_AS_DIG_OUTPUT();  // 14 : Audio output
    CONFIG_RB14_AS_DIG_OUTPUT();  // 14 : Comparator output

    _DSSR = 0;      // clear RELEASE bit
    _INT0IE = 0;    // only enabled when entering deep sleep mode
    _INT0 = 0;      // Clear Deep Sleep on INT0 edge flag

    #ifdef DEBUG
        uart_Config();
    #endif

    i2c_Config();
    tmr1_Config();
    tmr2_Config();
    tmr3_Config();
    button_Config();
    audio_Config();
    DataEEInit();
    dataEEFlags.val = 0;
}


void tmr1_callback(void) {
    tmr1_Stop();

    if (tmr1_waiting) {
        tmr1_waiting = 0;
    } else {
        ClrWdt();
        _IDLE = 0;
        if (sns_status) {
            tmr1_Start(MEASURE_PERIOD_T);
            ///////////////////////////////////           
            sns_ReadADC(&Praw);
            sns_TriggerTemperatureSample();            
            /////////////////////////////////// 2ms
            

//            values[values_i++] = filteredPressure;
//            if (values_i==NBVALUES) {
//                sprintf(dbgBuf, "Filtre : ");
//                uart_Print(dbgBuf);
//                for (values_i = 0; values_i < NBVALUES; values_i++){
//                    sprintf(dbgBuf, "%ld,", values[values_i]);
//                    uart_Print(dbgBuf);
//                }
//                uart_Print("\r\n");
//                values_i = 0;
//
//                sprintf(dbgBuf, "Filtre nouveau : ");
//                uart_Print(dbgBuf);
//                for (valuesf_i = 0; valuesf_i < NBVALUES; valuesf_i++){
//                    sprintf(dbgBuf, "%ld,", valuesf[valuesf_i]);
//                    uart_Print(dbgBuf);
//                }
//                uart_Print("\r\n");
//                valuesf_i = 0;
//            }
        } else {
            tmr1_Start(MEASURE_PERIOD_P);
            u32 Traw;
            sns_ReadADC(&Traw);            
            sns_TriggerPressureSample();
            
            sns_CompensateTemperature(Traw);            
            pressureSample = sns_CompensatePressure(Praw);
            samples[pressure_count] = filterPressure(pressureSample);;
            vario_ping();
            pressure_count++;
            if(pressure_count == MEASURE_INTEGRATE_TIME_IN_SAMPLES) {pressure_count = 0;}
        }
        sns_status = !sns_status;
        Idle();         // Save Power
    }
}


void wait(u32 ms) {
    tmr1_Stop();
    tmr1_waiting = 1;
    tmr1_Start(10 * ms);

    while (tmr1_waiting){
        Nop();
    }
}

int main(void) {
    mcu_Init();
    ClrWdt();
    sns_Reset();
    wait(2000);
    u8 state = (u8)DataEERead(1);
    Nop();
    Nop();
    Nop();
    setVolume(state);
#ifdef ELLE_AIME_LA_BITE
    u8 intro_i;
    for (intro_i = 0; intro_i < INTRO_LENGTH; intro_i++) {
        audio_Beep(intro_freqs[intro_i]);
        wait(intro_times[intro_i]);
    }
#endif
    audio_Beep(0);
    sns_Config();
    sns_status = 0;
    sns_TriggerTemperatureSample();
    tmr1_Start(MEASURE_PERIOD_T);

    vario_init();

    while(1){
        Nop();
    }

    return 0;
}
